#include "signalprovider.hpp"
#include "filter.hpp"
#include <cmath>

const float LowPassFilterConvValues[] = {
  -0.00890590804898282,
  -0.011454772784819465,
  -0.01526909632369373,
  -0.01642931845398556,
  -0.013422102710915075,
  -0.005693714829706808,
  0.005858304981961949,
  0.018806407533401473,
  0.02963933312447207,
  0.03471666990918713,
  0.0315091933168746,
  0.019699499902631246,
  0.0017589807082075744,
  -0.017227852730390455,
  -0.030653330949453914,
  -0.032137597905538266,
  -0.017410478347490224,
  0.014097765810074527,
  0.0586486826758224,
  0.10870283378294167,
  0.15457428430856013,
  0.18675107134815813,
  0.198317778812653,
  0.18675107134815813,
  0.15457428430856013,
  0.10870283378294167,
  0.0586486826758224,
  0.014097765810074527,
  -0.017410478347490224,
  -0.032137597905538266,
  -0.030653330949453914,
  -0.017227852730390455,
  0.0017589807082075744,
  0.019699499902631246,
  0.0315091933168746,
  0.03471666990918713,
  0.02963933312447207,
  0.018806407533401473,
  0.005858304981961949,
  -0.005693714829706808,
  -0.013422102710915075,
  -0.01642931845398556,
  -0.01526909632369373,
  -0.011454772784819465,
  -0.00890590804898282
};

void SignalProvider::InitSignals(std::size_t length)
{
	m_inputSignal.resize(length, 0.0);
	m_outputSignal.resize(length, 0.0);

	ConvolutionalFilter filter(LowPassFilterConvValues, sizeof(LowPassFilterConvValues) / sizeof(*LowPassFilterConvValues));

	for (std::size_t i = 0; i < m_inputSignal.size(); ++i)
	{
		const float x = std::sin(std::exp(static_cast<float>(i) * 0.0005f));	// 1.0f / (1.0f + std::exp(1.0f / std::sin(x)))
		m_inputSignal[i] = x;
		m_outputSignal[i] = filter.Update(x);
	}
}
